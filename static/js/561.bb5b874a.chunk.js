"use strict";(self.webpackChunksc_viaduct=self.webpackChunksc_viaduct||[]).push([[561],{88849:(e,t,n)=>{n.d(t,{L:()=>V,b:()=>H});var r,i,a,s,o,c,l,p,d,h,v,u,m,f,S,T,P=n(57528),g=n(99443),A=n(34981),_=n(26917),O=n(3838),y=n(48020),E=n(17698),N=n(94192),w=n(80883),R=n(81449),x=n(3799),z=n(95756),C=n(58350),I=n(21390),L=n(64839),D=n(43425),k=n(32307),b=n(70367),M=n(66470),U=n(50125),W=n(91911);function H(e){const t=new k.N5,n=e.terrainDepthTest&&e.output===A.V.Color,H=e.space===U.lM.World;t.include(O.s,e),t.include(E.r,e);const{vertex:V,fragment:j}=t;return j.include(R.W),(0,x.NB)(V,e),t.attributes.add(M.r.POSITION,"vec3"),t.attributes.add(M.r.PREVPOSITION,"vec3"),t.attributes.add(M.r.UV0,"vec2"),t.varyings.add("vColor","vec4"),t.varyings.add("vpos","vec3"),t.varyings.add("vUV","vec2"),t.varyings.add("vSize","float"),n&&t.varyings.add("depth","float"),e.hasTip&&t.varyings.add("vLineWidth","float"),V.uniforms.add(new z.G("nearFar",((e,t)=>t.camera.nearFar)),new C.E("viewport",((e,t)=>t.camera.fullViewport))),V.code.add((0,L.H)(r||(r=(0,P.A)(["vec4 projectAndScale(vec4 pos) {\nvec4 posNdc = proj * pos;\nposNdc.xy *= viewport.zw / posNdc.w;\nreturn posNdc;\n}"])))),V.code.add((0,L.H)(i||(i=(0,P.A)(["void clip(vec4 pos, inout vec4 prev) {\nfloat vnp = nearFar[0] * 0.99;\nif (prev.z > -nearFar[0]) {\nfloat interpolation = (-vnp - pos.z) / (prev.z - pos.z);\nprev = mix(pos, prev, interpolation);\n}\n}"])))),H?(t.attributes.add(M.r.NORMAL,"vec3"),(0,x.S7)(V),V.constants.add("tiltThreshold","float",.7),V.code.add((0,L.H)(a||(a=(0,P.A)(["vec3 perpendicular(vec3 v) {\nvec3 n = (viewNormal * vec4(normal.xyz, 1.0)).xyz;\nvec3 n2 = cross(v, n);\nvec3 forward = vec3(0.0, 0.0, 1.0);\nfloat tiltDot = dot(forward, n);\nreturn abs(tiltDot) < tiltThreshold ? n : n2;\n}"]))))):V.code.add((0,L.H)(s||(s=(0,P.A)(["vec2 perpendicular(vec2 v) {\nreturn vec2(v.y, -v.x);\n}"])))),V.code.add((0,L.H)(o||(o=(0,P.A)(["\n      #define vecN ","\n\n      vecN normalizedSegment(vecN pos, vecN prev) {\n        vecN segment = pos - prev;\n        float segmentLen = length(segment);\n\n        // normalize or zero if too short\n        return (segmentLen > 0.001) ? segment / segmentLen : ",";\n      }\n\n      vecN displace(vecN pos, vecN prev, float displacementLen) {\n        vecN segment = normalizedSegment(pos, prev);\n\n        vecN displacementDirU = perpendicular(segment);\n        vecN displacementDirV = segment;\n\n        ","\n\n        return pos + displacementLen * (uv0.x * displacementDirU + uv0.y * displacementDirV);\n      }\n    "])),H?"vec3":"vec2",H?"vec3(0.0, 0.0, 0.0)":"vec2(0.0, 0.0)",e.anchor===U.kJ.Tip?"pos -= 0.5 * displacementLen * displacementDirV;":"")),e.space===U.lM.Screen&&(V.uniforms.add(new D.X("inverseProjectionMatrix",((e,t)=>t.camera.inverseProjectionMatrix))),V.code.add((0,L.H)(c||(c=(0,P.A)(["vec3 inverseProject(vec4 posScreen) {\nposScreen.xy = (posScreen.xy / viewport.zw) * posScreen.w;\nreturn (inverseProjectionMatrix * posScreen).xyz;\n}"])))),V.code.add((0,L.H)(l||(l=(0,P.A)(["bool rayIntersectPlane(vec3 rayDir, vec3 planeOrigin, vec3 planeNormal, out vec3 intersection) {\nfloat cos = dot(rayDir, planeNormal);\nfloat t = dot(planeOrigin, planeNormal) / cos;\nintersection = t * rayDir;\nreturn abs(cos) > 0.001 && t > 0.0;\n}"])))),V.uniforms.add(new I.m("perScreenPixelRatio",((e,t)=>t.camera.perScreenPixelRatio))),V.code.add((0,L.H)(p||(p=(0,P.A)(["\n      vec4 toFront(vec4 displacedPosScreen, vec3 posLeft, vec3 posRight, vec3 prev, float lineWidth) {\n        // Project displaced position back to camera space\n        vec3 displacedPos = inverseProject(displacedPosScreen);\n\n        // Calculate the plane that we want the marker to lie in. Note that this will always be an approximation since ribbon lines are generally\n        // not planar and we do not know the actual position of the displaced prev vertices (they are offset in screen space, too).\n        vec3 planeNormal = normalize(cross(posLeft - posRight, posLeft - prev));\n        vec3 planeOrigin = posLeft;\n\n        ",";\n\n        // Move the plane towards the camera by a margin dependent on the line width (approximated in world space). This tolerance corrects for the\n        // non-planarity in most cases, but sharp joins can place the prev vertices at arbitrary positions so markers can still clip.\n        float offset = lineWidth * perScreenPixelRatio;\n        planeOrigin *= (1.0 - offset);\n\n        // Intersect camera ray with the plane and make sure it is within clip space\n        vec3 rayDir = normalize(displacedPos);\n        vec3 intersection;\n        if (rayIntersectPlane(rayDir, planeOrigin, planeNormal, intersection) && intersection.z < -nearFar[0] && intersection.z > -nearFar[1]) {\n          return vec4(intersection.xyz, 1.0);\n        }\n\n        // Fallback: use depth of pos or prev, whichever is closer to the camera\n        float minDepth = planeOrigin.z > prev.z ? length(planeOrigin) : length(prev);\n        displacedPos *= minDepth / length(displacedPos);\n        return vec4(displacedPos.xyz, 1.0);\n      }\n  "])),e.hasCap?"\n                if(prev.z > posLeft.z) {\n                  vec2 diff = posLeft.xy - posRight.xy;\n                  planeOrigin.xy += perpendicular(diff) / 2.0;\n                }\n              ":""))),(0,x.Nz)(V),V.main.add((0,L.H)(d||(d=(0,P.A)(["\n    // Check for special value of uv0.y which is used by the Renderer when graphics\n    // are removed before the VBO is recompacted. If this is the case, then we just\n    // project outside of clip space.\n    if (uv0.y == 0.0) {\n      // Project out of clip space\n      gl_Position = vec4(1e038, 1e038, 1e038, 1.0);\n    }\n    else {\n      float lineWidth = getLineWidth();\n      float screenMarkerSize = getScreenMarkerSize();\n\n      vec4 pos  = view * vec4(position, 1.0);\n      vec4 prev = view * vec4(prevPosition, 1.0);\n      clip(pos, prev);\n\n      ","\n\n      ","\n\n      // Convert back into NDC\n      displacedPosScreen.xy = (displacedPosScreen.xy / viewport.zw) * displacedPosScreen.w;\n\n      // Convert texture coordinate into [0,1]\n      vUV = (uv0 + 1.0) / 2.0;\n      ","\n      ","\n\n      vSize = screenMarkerSize;\n      vColor = getColor();\n\n      // Use camera space for slicing\n      vpos = pos.xyz;\n\n      gl_Position = displacedPosScreen;\n    }"])),H?(0,L.H)(h||(h=(0,P.A)(["","\n            pos.xyz = displace(pos.xyz, prev.xyz, getWorldMarkerSize(pos));\n            vec4 displacedPosScreen = projectAndScale(pos);"])),e.hideOnShortSegments?(0,L.H)(v||(v=(0,P.A)(["\n                  if (areWorldMarkersHidden(pos, prev)) {\n                    // Project out of clip space\n                    gl_Position = vec4(1e038, 1e038, 1e038, 1.0);\n                    return;\n                  }"]))):""):(0,L.H)(u||(u=(0,P.A)(["\n            vec4 posScreen = projectAndScale(pos);\n            vec4 prevScreen = projectAndScale(prev);\n            vec4 displacedPosScreen = posScreen;\n\n            displacedPosScreen.xy = displace(posScreen.xy, prevScreen.xy, screenMarkerSize);\n            ",""])),e.space===U.lM.Screen?(0,L.H)(m||(m=(0,P.A)(["\n                vec2 displacementDirU = perpendicular(normalizedSegment(posScreen.xy, prevScreen.xy));\n\n                // We need three points of the ribbon line in camera space to calculate the plane it lies in\n                // Note that we approximate the third point, since we have no information about the join around prev\n                vec3 lineRight = inverseProject(posScreen + lineWidth * vec4(displacementDirU.xy, 0.0, 0.0));\n                vec3 lineLeft = pos.xyz + (pos.xyz - lineRight);\n\n                pos = toFront(displacedPosScreen, lineLeft, lineRight, prev.xyz, lineWidth);\n                displacedPosScreen = projectAndScale(pos);"]))):""),n?"depth = pos.z;":"",H?"":"vUV *= displacedPosScreen.w;",e.hasTip?"vLineWidth = lineWidth;":"")),n&&t.include(N.Z,e),t.include(_.HQ,e),t.include(W.z,e),j.uniforms.add(new C.E("intrinsicColor",(e=>e.color)),new b.N("tex",(e=>e.markerTexture))),j.include(w.a),j.constants.add("texelSize","float",1/g.vO),j.code.add((0,L.H)(f||(f=(0,P.A)(["float markerAlpha(vec2 samplePos) {\nsamplePos += vec2(0.5, -0.5) * texelSize;\nfloat sdf = rgba2float(texture(tex, samplePos)) - 0.5;\nfloat distance = sdf * vSize;\ndistance -= 0.5;\nreturn clamp(0.5 - distance, 0.0, 1.0);\n}"])))),e.hasTip&&j.constants.add("relativeMarkerSize","float",g.Cz/g.vO).constants.add("relativeTipLineWidth","float",g.DZ).code.add((0,L.H)(S||(S=(0,P.A)(["\n    float tipAlpha(vec2 samplePos) {\n      // Convert coordinates s.t. they are in pixels and relative to the tip of an arrow marker\n      samplePos -= vec2(0.5, 0.5 + 0.5 * relativeMarkerSize);\n      samplePos *= vSize;\n\n      float halfMarkerSize = 0.5 * relativeMarkerSize * vSize;\n      float halfTipLineWidth = 0.5 * max(1.0, relativeTipLineWidth * vLineWidth);\n\n      ","\n\n      float distance = max(abs(samplePos.x) - halfMarkerSize, abs(samplePos.y) - halfTipLineWidth);\n      return clamp(0.5 - distance, 0.0, 1.0);\n    }\n  "])),H?"halfTipLineWidth *= fwidth(samplePos.y);":"")),t.include(y.Q,e),j.main.add((0,L.H)(T||(T=(0,P.A)(["\n    discardBySlice(vpos);\n    ","\n\n    vec4 finalColor = intrinsicColor * vColor;\n    ","\n    ","\n    outputColorHighlightOID(finalColor, vpos);"])),n?"terrainDepthTest(depth);":"",H?"vec2 samplePos = vUV;":"vec2 samplePos = vUV * gl_FragCoord.w;",e.hasTip?"finalColor.a *= max(markerAlpha(samplePos), tipAlpha(samplePos));":"finalColor.a *= markerAlpha(samplePos);")),t}const V=Object.freeze(Object.defineProperty({__proto__:null,build:H},Symbol.toStringTag,{value:"Module"}))},60561:(e,t,n)=>{n.d(t,{i:()=>y});var r=n(20664),i=n(9392),a=n(48549),s=n(34981),o=n(90235),c=n(75803),l=n(45463),p=n(77730),d=n(66470),h=n(93684),v=n(16506),u=n(59246),m=n(60322),f=n(96643),S=n(88849),T=n(50125),P=n(93345),g=n(57162);class A extends u.w{constructor(e,t,r){super(e,t,new v.$(S.L,(()=>n.e(6419).then(n.bind(n,66419)))),r,_)}_makePipelineState(e,t){const{output:n,oitPass:r,space:i,hasOccludees:a}=e;return(0,g.Ey)({blending:n===s.V.Color?(0,m.Yf)(r):null,depthTest:i===T.lM.Draped?null:{func:(0,m.K_)(r)},depthWrite:(0,m.z5)(e),drawBuffers:n===s.V.Depth?{buffers:[P.Hr.NONE]}:(0,m.m6)(r,n),colorWrite:g.kn,stencilWrite:a?f.v0:null,stencilTest:a?t?f.a9:f.qh:null,polygonOffset:{factor:0,units:-10}})}initializePipeline(e){return e.occluder?(this._occluderPipelineTransparent=(0,g.Ey)({blending:g.Ky,depthTest:f.sf,depthWrite:null,colorWrite:g.kn,stencilWrite:null,stencilTest:f.mK}),this._occluderPipelineOpaque=(0,g.Ey)({blending:g.Ky,depthTest:f.sf,depthWrite:null,colorWrite:g.kn,stencilWrite:f.r8,stencilTest:f.I$}),this._occluderPipelineMaskWrite=(0,g.Ey)({blending:null,depthTest:f.m,depthWrite:null,colorWrite:null,stencilWrite:f.v0,stencilTest:f.a9})):this._occluderPipelineTransparent=this._occluderPipelineOpaque=this._occluderPipelineMaskWrite=null,this._occludeePipelineState=this._makePipelineState(e,!0),this._makePipelineState(e,!1)}getPipeline(e,t){var n,r,i;return e?this._occludeePipelineState:t===p.N.TRANSPARENT_OCCLUDER_MATERIAL?null!==(n=this._occluderPipelineTransparent)&&void 0!==n?n:super.getPipeline():t===p.N.OCCLUDER_MATERIAL?null!==(r=this._occluderPipelineOpaque)&&void 0!==r?r:super.getPipeline():null!==(i=this._occluderPipelineMaskWrite)&&void 0!==i?i:super.getPipeline()}}const _=new Map([[d.r.POSITION,0],[d.r.PREVPOSITION,1],[d.r.UV0,2],[d.r.NORMAL,3],[d.r.COLOR,4],[d.r.COLORFEATUREATTRIBUTE,4],[d.r.SIZE,5],[d.r.SIZEFEATUREATTRIBUTE,5],[d.r.OPACITYFEATUREATTRIBUTE,6]]);var O=n(46259);class y extends l.im{constructor(e){super(e,N),this._configuration=new T.Dt,this.vertexAttributeLocations=_,this.produces=new Map([[p.N.OPAQUE_MATERIAL,e=>e===s.V.Highlight||(0,s._o)(e)&&this.parameters.renderOccluded===l.m$.OccludeAndTransparentStencil],[p.N.OPAQUE_MATERIAL_WITHOUT_NORMALS,e=>(0,s.eh)(e)],[p.N.OCCLUDER_MATERIAL,e=>(0,s.aD)(e)&&this.parameters.renderOccluded===l.m$.OccludeAndTransparentStencil],[p.N.TRANSPARENT_OCCLUDER_MATERIAL,e=>(0,s.aD)(e)&&this.parameters.renderOccluded===l.m$.OccludeAndTransparentStencil],[p.N.TRANSPARENT_MATERIAL,e=>(0,s._o)(e)&&this.parameters.writeDepth],[p.N.TRANSPARENT_MATERIAL_WITHOUT_DEPTH,e=>(0,s._o)(e)&&!this.parameters.writeDepth],[p.N.DRAPED_MATERIAL,e=>e===s.V.Color||e===s.V.Highlight]]),this._layout=this.createLayout()}getConfiguration(e,t){return this._configuration.output=e,this._configuration.space=t.slot===p.N.DRAPED_MATERIAL?T.lM.Draped:this.parameters.worldSpace?T.lM.World:T.lM.Screen,this._configuration.hideOnShortSegments=this.parameters.hideOnShortSegments,this._configuration.hasCap=this.parameters.cap!==O.x.BUTT,this._configuration.anchor=this.parameters.anchor,this._configuration.hasTip=this.parameters.hasTip,this._configuration.hasSlicePlane=this.parameters.hasSlicePlane,this._configuration.hasOccludees=t.hasOccludees,this._configuration.writeDepth=this.parameters.writeDepth,this._configuration.vvSize=!!this.parameters.vvSize,this._configuration.vvColor=!!this.parameters.vvColor,this._configuration.vvOpacity=!!this.parameters.vvOpacity,this._configuration.occluder=this.parameters.renderOccluded===l.m$.OccludeAndTransparentStencil,this._configuration.oitPass=t.oitPass,this._configuration.terrainDepthTest=t.terrainDepthTest,this._configuration.cullAboveTerrain=t.cullAboveTerrain,this._configuration}get visible(){return this.parameters.color[3]>=o.Q}intersect(){}createLayout(){const e=(0,a.BP)().vec3f(d.r.POSITION).vec3f(d.r.PREVPOSITION).vec2f(d.r.UV0);return this.parameters.worldSpace&&e.vec3f(d.r.NORMAL),this.parameters.vvSize?e.f32(d.r.SIZEFEATUREATTRIBUTE):e.f32(d.r.SIZE),this.parameters.vvColor?e.f32(d.r.COLORFEATUREATTRIBUTE):e.vec4f(d.r.COLOR),this.parameters.vvOpacity&&e.f32(d.r.OPACITYFEATUREATTRIBUTE),e}createBufferWriter(){return new w(this._layout,this.parameters)}createGLMaterial(e){return new E(e)}}class E extends c.m8{constructor(){super(...arguments),this._markerPrimitive=null}dispose(){super.dispose(),this._markerTextures.release(this._markerPrimitive),this._markerPrimitive=null}beginSlot(e){const t=this._material.parameters.markerPrimitive;return t!==this._markerPrimitive&&(this._material.setParameters({markerTexture:this._markerTextures.swap(t,this._markerPrimitive)}),this._markerPrimitive=t),this._material.setParameters(this.textureBindParameters),this.acquireTechnique(A,e)}}class N extends h.S{constructor(){super(...arguments),this.width=0,this.color=[1,1,1,1],this.markerPrimitive="arrow",this.placement="end",this.cap=O.x.BUTT,this.anchor=T.kJ.Center,this.hasTip=!1,this.worldSpace=!1,this.hideOnShortSegments=!1,this.writeDepth=!0,this.hasSlicePlane=!1,this.vvFastUpdate=!1,this.markerTexture=null}}class w{constructor(e,t){this.vertexBufferLayout=e,this._parameters=t}elementCount(){return"begin-end"===this._parameters.placement?12:6}write(e,t,n,i,a,s){const o=n.get(d.r.POSITION).data,c=o.length/3;let l=[1,0,0];const p=n.get(d.r.NORMAL);this._parameters.worldSpace&&null!=p&&(l=p.data);let h=1,v=0;this._parameters.vvSize?v=n.get(d.r.SIZEFEATUREATTRIBUTE).data[0]:n.has(d.r.SIZE)&&(h=n.get(d.r.SIZE).data[0]);let u=[1,1,1,1],m=0;this._parameters.vvColor?m=n.get(d.r.COLORFEATUREATTRIBUTE).data[0]:n.has(d.r.COLOR)&&(u=n.get(d.r.COLOR).data);let f=0;this._parameters.vvOpacity&&(f=n.get(d.r.OPACITYFEATUREATTRIBUTE).data[0]);const S=new Float32Array(a.buffer);let T=s*(this.vertexBufferLayout.stride/4);const P=(e,t,n,r)=>{if(S[T++]=e[0],S[T++]=e[1],S[T++]=e[2],S[T++]=t[0],S[T++]=t[1],S[T++]=t[2],S[T++]=n[0],S[T++]=n[1],this._parameters.worldSpace&&(S[T++]=l[0],S[T++]=l[1],S[T++]=l[2]),this._parameters.vvSize?S[T++]=v:S[T++]=h,this._parameters.vvColor)S[T++]=m;else{const e=Math.min(4*r,u.length-4);S[T++]=u[e],S[T++]=u[e+1],S[T++]=u[e+2],S[T++]=u[e+3]}this._parameters.vvOpacity&&(S[T++]=f)};let g;var A;(A=g||(g={}))[A.ASCENDING=1]="ASCENDING",A[A.DESCENDING=-1]="DESCENDING";const _=(t,n)=>{const i=(0,r.i)(R,o[3*t],o[3*t+1],o[3*t+2]),a=x;let s=t+n;do{(0,r.i)(a,o[3*s],o[3*s+1],o[3*s+2]),s+=n}while((0,r.H)(i,a)&&s>=0&&s<c);e&&((0,r.t)(i,i,e),(0,r.t)(a,a,e)),P(i,a,[-1,-1],t),P(i,a,[1,-1],t),P(i,a,[1,1],t),P(i,a,[-1,-1],t),P(i,a,[1,1],t),P(i,a,[-1,1],t)},O=this._parameters.placement;"begin"!==O&&"begin-end"!==O||_(0,g.ASCENDING),"end"!==O&&"begin-end"!==O||_(c-1,g.DESCENDING)}}const R=(0,i.vt)(),x=(0,i.vt)()}}]);
//# sourceMappingURL=561.bb5b874a.chunk.js.map